using Assets.RTS.Scripts.Controllers;
using Assets.RTS.Scripts.navigation;
using Assets.RTS.Scripts.ScriptableObjects;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;


public class NavMeshBehaviour : MonoBehaviour
{



	public NavMeshAgent agent;
	public AgentStats agentStats;

	private FlockingBehaviour flockingBehaviour;
	private UnitController uController;
	public GameObject waypointPrefab;

	public int currentWP = 0;
	private Vector3 direction;
	public List<Vector3> waypoints = new List<Vector3>();
	// Start is called before the first frame update
	void Start()
	{
		agent = GetComponent<NavMeshAgent>();
		uController = GetComponent<UnitController>();
		flockingBehaviour = GetComponent<FlockingBehaviour>();
		agent.updatePosition = false;
		//agent.updateRotation = false;
	}



	void Update()
	{

	}

	private void FixedUpdate()
	{
		if (TargetReached() || IsNearLeader())
		{
			//Debug.Log(currentWP + " " + waypoints.Count);
			if (currentWP >= waypoints.Count - 1)
			{
				//ClearWaypoints();
			}
			else
			{
				NextWaypoint();
			}
		}


		if (uController.isGroupLeader && TargetReached())
		{

			GetGroup().TargetReached = true;
		}


		transform.position = agent.nextPosition;


		switch (uController.unitType)
		{
			case UnitType.Tank:
				//if (Vector3.Angle(agent.velocity, transform.forward) > 3f)
				//{
				//	transform.position = agent.nextPosition;
				//}
				break;
			case UnitType.Vehicle:
			case UnitType.Infantry:
			case UnitType.Jet:
			case UnitType.Heli:
				break;
			default:
				break;
		}


	}



	public void SetDestination(Vector3 dest)
	{

		agent.speed = agentStats.maxSpeed;
		agent.acceleration = agentStats.maxAccel;
		agent.angularSpeed = agentStats.maxAngularSpeed;
		agent.stoppingDistance = agentStats.stoppingDistance;
		agent.avoidancePriority = uController.IsGroupLeader ? agentStats.leaderPriority : agentStats.priority;
		agent.SetDestination(dest);
	}




	private void NextWaypoint()
	{
		//Debug.Log(currentWP);
		currentWP++;
		Vector3 nextWaypont = waypoints[currentWP];
		SetDestination(nextWaypont);




		if (uController.IsGroupLeader)
		{
			//Vector3 next = waypoints[currentWP];
			GameObject nextWaypointObj = GetGroup().waypointsObj[currentWP];
			nextWaypointObj.GetComponent<LineRenderer>().SetPosition(1, nextWaypointObj.transform.position);
			GameObject previous = GetGroup().waypointsObj[currentWP - 1];
			GetGroup().target = nextWaypont;
			GetGroup().TargetReached = false;
			Destroy(previous);

		}

		//SetDestination(GetGroup().target);



	}



	public void ClearWaypoints()
	{
		if (GetGroup() != null && uController.IsGroupLeader)
		{

			foreach (GameObject obj in GetGroup().waypointsObj)
			{
				Destroy(obj);
			}
			GetGroup().waypointsObj.Clear();
		}

		waypoints.Clear();

		currentWP = 0; // reset waypoint counter
	}

	public void AddWaypoint(Vector3 point)
	{
		waypoints.Add(point);
		// waypoint diplay
		if (uController.isGroupLeader) // if is Group Leader, add to group waypoint list and display it
		{
			GameObject obj = Instantiate(waypointPrefab, point, Quaternion.identity, null);
			LineRenderer lineRenderer = obj.GetComponent<LineRenderer>();

			Group group = GetGroup();

			group.waypointsObj.Add(obj);

			if (group.waypointsObj.Count > 1)
			{
				Vector3 last = group.waypointsObj[group.waypointsObj.Count - 2].transform.position;
				lineRenderer.SetPosition(1, last);
				lineRenderer.SetPosition(0, obj.transform.position);
			}
		}
	}

	private void Rotate()
	{
		Group group = GetGroup();

		// Determine which direction to rotate towards

		// The step size is equal to speed times frame time.
		float singleStep = agentStats.maxAngularSpeed * Time.deltaTime;

		// Rotate the forward vector towards the target direction by one step
		Vector3 newDirection = Vector3.RotateTowards(transform.forward, group.orientation, singleStep, 0.0f);

		// Draw a ray pointing at our target in
		Debug.DrawRay(transform.position, newDirection, Color.red);

		// Calculate a rotation a step closer to the target and applies rotation to this object
		transform.rotation = Quaternion.LookRotation(newDirection);

	}


	public bool TargetReached()
	{

		return (agent.destination - transform.position).magnitude < agentStats.stoppingDistance;
	}

	public bool IsNearLeader()
	{
		if (GetGroup() == null) return false;

		return !uController.IsGroupLeader && (GetGroup().leader.transform.position - transform.position).magnitude < GetGroup().leaderRadius;

	}

	private Group GetGroup()
	{
		return uController.group;
	}
}
